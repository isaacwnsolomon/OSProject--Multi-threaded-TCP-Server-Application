import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.Scanner;
import java.time.LocalDate; // import the LocalDate class

public class ServerThread extends Thread {

    private Socket myConnection;            // The socket connection to the client
    private ObjectOutputStream out;         // Output stream for sending data to the client
    private ObjectInputStream in;           // Input stream for receiving data from the client
    private String message;                 // Variable to store messages from the client
    private String name, employeeID, email, password, deptName, role, passwordAttempt, emailAttempt; // Variables to store employee data
    private AccountDB shared; // Shared instance
    private int loginChoice, reportChoice, reportID = 0, reportStatus,assignedID;
    private ReportDB reportDB;
    
    Scanner keyboard = new Scanner(System.in); 
    LocalDate date = LocalDate.now(); // Create a date object
    // Constructor that accepts a socket connection and AccountDB
   
    public ServerThread(Socket s, AccountDB db, ReportDB reportDB) {
        myConnection = s;
        shared = db;
        this.reportDB = reportDB;
        
    }

    // The main logic of the thread that handles client requests
    public void run() {
        try {
            // Initialize the output and input streams for communication
            out = new ObjectOutputStream(myConnection.getOutputStream());
            out.flush();
            in = new ObjectInputStream(myConnection.getInputStream());
            
            // The server is ready to communicate
            do {
                // Prompt user for operation choice until a valid input is received
                do {
                    sendMessage("Please enter 1 to register or 2 to login");
                    message = (String) in.readObject();
                } while (!message.equalsIgnoreCase("1") && 
                         !message.equalsIgnoreCase("2"));
                
                // Enter details if the client selected option 1
                if (message.equalsIgnoreCase("1")) {
                    sendMessage("Please enter your name: ");
                    name = (String) in.readObject();
                   
                    sendMessage("Please enter your employee ID: ");
                    employeeID = (String) in.readObject();
                    
                    sendMessage("Please enter your email: ");
                    email = (String) in.readObject();
                    
                    sendMessage("Please enter your password");
                    password = (String) in.readObject();
                    
                    sendMessage("Please enter department name");
                    deptName = (String) in.readObject();
                    
                    sendMessage("Please enter your role");
                    role = (String) in.readObject();
                    
                    shared.addAccount(name, employeeID, email, password, deptName, role);
                   
                }
                // Login if the client selected option 2
                else if (message.equalsIgnoreCase("2")) {
                	 sendMessage("Please enter your email: ");
                	 emailAttempt = (String) in.readObject();
                	 
                	 sendMessage("Please enter your password");
                	 passwordAttempt = (String) in.readObject();
                	 
                	 // Prints account details to screen 
                	 shared.printAccounts();
                	 
                //	 shared.searchAccount(emailAttempt, passwordAttempt);
                	 
                	 if(shared.searchAccount(emailAttempt, passwordAttempt) == true)
                	 {
                		 
                		 sendMessage("Login Success!\n"
                		 		+ "Please enter 1 to create a health and safety report:\n"
                		 		+ "Please enter 2 to retrieve all registerd accident reports:\n"
                		 		+ "Please enter 3 to Assign health and safety report to employee:\n"
                		 		+ "Please enter 4 to update your password:\n");
                		 message = (String)in.readObject();
                		 loginChoice= Integer.parseInt(message);
                		 System.out.println("Login choice received: " + loginChoice);

                		 
                		 if(loginChoice == 1)
                		 {
                			 System.out.println("Creating report...");

                			 String reportType;
                			 String reportStatus = "Open";
                			sendMessage("1 for accident report or 2 for health and safety risk report");
                			 System.out.println("Sent report type prompt to client.");
                			message = (String)in.readObject();
                			 System.out.println("Received report choice from client: " + message);
                			reportChoice = Integer.parseInt(message);
                			reportID++;
                			
                			if(reportChoice == 1)
                			{
                				reportType = "Accident Report";
                			}
                			else {
                				reportType = "Health and Safety Risk Report";
                			}
                			 System.out.println("Report type set to: " + reportType);
                			
                			sendMessage("Report ID: " + reportID);
                			sendMessage("Date: " + date);
                			sendMessage("Employee ID of creation: " + employeeID);
                			sendMessage("Status: " + reportStatus);
                			sendMessage("Assigned Employee ID: ");
                			
                			message = (String)in.readObject();
                			assignedID = Integer.parseInt(message);
                			
                			reportDB.addReport(reportID, date, employeeID, reportType, reportStatus, assignedID);
                			
                			// Confirm creation of report and send back to client
                			 sendMessage("Report created successfully!\n" +
                		                "Report Details:\n" +
                		                "Type: " + reportType + "\n" +
                		                "Report ID: " + reportID + "\n" +
                		                "Date: " + date + "\n" +
                		                "Created By: " + employeeID + "\n" +
                		                "Assigned To: " + assignedID + "\n" +
                		                "Status: " + reportStatus);
                		 }
                	 }
                	 else {
                		 sendMessage("Login failed - Unable to find account\n1 to try again");
                		 message = (String)in.readObject();
                		 loginChoice= Integer.parseInt(message);
                	 }
                }
                // Ask if the client wants to repeat the operation
                
                sendMessage("Enter 1 to repeat");
                message = (String) in.readObject();
            } while (message.equalsIgnoreCase("1"));
            
            }
            catch (IOException | ClassNotFoundException e) {
            // Handle exceptions during I/O or object read errors
            e.printStackTrace();
        } finally {
            // Close the connection and resources in the end
            try {
                in.close();
                out.close();
                myConnection.close();
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
        }
    }

    // Helper method to send messages to the client
    void sendMessage(String msg) {
        try {
            out.writeObject(msg);    // Write the message object to output stream
            out.flush();             // Flush the stream to ensure the message is sent
            System.out.println("server> " + msg);   // Print the message on the server console
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }
}
