public class ServerThread extends Thread {

    private Socket myConnection;
    private ObjectOutputStream out;
    private ObjectInputStream in;
    private String message;
    private String name, employeeID, email, password, deptName, role, passwordAttempt, emailAttempt, reportType;
    private AccountDB shared;
    private int loginChoice, reportChoice, reportID = 0, reportStatus, assignedID;
    private ReportDB reportDB;
    private LocalDate date = LocalDate.now();

    public ServerThread(Socket s, AccountDB db, ReportDB reportDB) {
        myConnection = s;
        shared = db;
        this.reportDB = reportDB;
    }

    public void run() {
        try {
            out = new ObjectOutputStream(myConnection.getOutputStream());
            out.flush();
            in = new ObjectInputStream(myConnection.getInputStream());

            boolean keepRunning = true;

            while (keepRunning) {
                sendMessage("Please enter 1 to register, 2 to login, or 0 to exit");
                message = (String) in.readObject();

                if (message.equalsIgnoreCase("0")) {
                    sendMessage("Goodbye!");
                    keepRunning = false;
                    break;
                }

                if (message.equalsIgnoreCase("1")) {
                    registerUser();
                } else if (message.equalsIgnoreCase("2")) {
                    loginUser();
                } else {
                    sendMessage("Invalid choice. Please enter 1, 2, or 0.");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage("An error occurred. Disconnecting...");
        } finally {
            try {
                if (in != null) in.close();
                if (out != null) out.close();
                if (myConnection != null) myConnection.close();
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
        }
    }

    private void registerUser() throws IOException, ClassNotFoundException {
        sendMessage("Please enter your name: ");
        name = (String) in.readObject();

        sendMessage("Please enter your employee ID: ");
        employeeID = (String) in.readObject();

        sendMessage("Please enter your email: ");
        email = (String) in.readObject();

        sendMessage("Please enter your password: ");
        password = (String) in.readObject();

        sendMessage("Please enter department name: ");
        deptName = (String) in.readObject();

        sendMessage("Please enter your role: ");
        role = (String) in.readObject();

        shared.addAccount(name, employeeID, email, password, deptName, role);

        sendMessage("Registration succeeded!");
    }

    private void loginUser() throws IOException, ClassNotFoundException {
        sendMessage("Please enter your email: ");
        emailAttempt = (String) in.readObject();

        sendMessage("Please enter your password: ");
        passwordAttempt = (String) in.readObject();

        if (shared.searchAccount(emailAttempt, passwordAttempt)) {
            sendMessage("Login successful!");

            Account loggedInAccount = shared.getAccountByEmail(emailAttempt);
            if (loggedInAccount != null) {
                employeeID = loggedInAccount.getEmployeeID();
                boolean loggedIn = true;

                while (loggedIn) {
                    sendMessage("Main Menu\n"
                            + "1. Create a health and safety report\n"
                            + "2. Retrieve all registered accident reports\n"
                            + "3. Assign health and safety report to employee\n"
                            + "4. Update your password\n"
                            + "0. Log out");

                    message = (String) in.readObject();

                    switch (message) {
                        case "1":
                            createReport();
                            break;
                        case "2":
                            sendMessage(reportDB.getAllReports());
                            break;
                        case "3":
                            sendMessage("Assigning report...");
                            break;
                        case "4":
                            sendMessage("Updating password...");
                            break;
                        case "0":
                            sendMessage("Logging out...");
                            loggedIn = false;
                            break;
                        default:
                            sendMessage("Invalid choice. Please try again.");
                    }
                }
            }
        } else {
            sendMessage("Login failed. Please check your email and password.");
        }
    } 
    catch(UnknownHostException unknownHost)
	{
		System.err.println("You are trying to connect to an unknown host!");
	}
	catch(IOException ioException){
		ioException.printStackTrace();
	} catch (ClassNotFoundException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	finally
	{
		//4: Closing connection
		try{
			in.close();
			out.close();
			requestSocket.close();
		}
		catch(IOException ioException){
			ioException.printStackTrace();
		}
	}
}
void sendMessage(String msg)
{
	try{
		out.writeObject(msg);
		out.flush();
		System.out.println("client>" + msg);
	}
	catch(IOException ioException){
		ioException.printStackTrace();
	}
}
public static void main(String args[])
{
	Requester client = new Requester();
	client.run();
}
}
    
    private void createReport() throws IOException, ClassNotFoundException {
    	 
    	String message;
    	    int reportChoice;

    	    // Prompt for a valid choice
    	    while (true) {
    	        sendMessage("1 for accident report or 2 for health and safety risk report");
    	        message = (String) in.readObject();

    	        if (message.equals("1") || message.equals("2")) {
    	            reportChoice = Integer.parseInt(message);
    	            break;
    	        } else {
    	            sendMessage("Invalid input. Please enter 1 or 2.");
    	        }
    	    }
        
        reportID++;
        
        if (reportChoice == 1) {
            reportType = "Accident Report";
        } else {
            reportType = "Health and Safety Report";
        }
        
        //Creates report
        reportDB.addReport(reportID, date, employeeID, reportType, "Open", assignedID);
        
        sendMessage("Report ID: " + reportID);
        String dateString = date.toString(); // Convert LocalDate to string
        sendMessage("Date: " + dateString);
        sendMessage("Employee ID of creation: " + employeeID);
        sendMessage("Status: Open");
        sendMessage("Assigned Employee ID: ");

        


        // Confirm report creation
        sendMessage("Report created successfully!\n" +
                "Report Details:\n" +
                "Type: " + reportType + "\n" +
                "Report ID: " + reportID + "\n" +
                "Date: " + dateString + "\n" +
                "Created By: " + employeeID + "\n" +
                "Assigned To: " + assignedID + "\n" +
                "Status: Open");
        
        sendMessage("Returning to the main menu...");
    }

}
