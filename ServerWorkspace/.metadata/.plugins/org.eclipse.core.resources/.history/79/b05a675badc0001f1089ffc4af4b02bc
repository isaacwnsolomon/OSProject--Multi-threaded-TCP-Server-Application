import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.Scanner;
import java.time.LocalDate; // import the LocalDate class

public class ServerThread extends Thread {

    private Socket myConnection;            // The socket connection to the client
    private ObjectOutputStream out;         // Output stream for sending data to the client
    private ObjectInputStream in;           // Input stream for receiving data from the client
    private String message;                 // Variable to store messages from the client
    private String name, employeeID, email, password, deptName, role, passwordAttempt, emailAttempt, reportType; // Variables to store employee data
    private AccountDB shared; // Shared instance
    private int loginChoice, reportChoice, reportID = 0, reportStatus,assignedID;
    private ReportDB reportDB;
    
    Scanner keyboard = new Scanner(System.in); 
    LocalDate date = LocalDate.now(); // Create a date object
    // Constructor that accepts a socket connection and AccountDB
   
    public ServerThread(Socket s, AccountDB db, ReportDB reportDB) {
        myConnection = s;
        shared = db;
        this.reportDB = reportDB;
        
    }

    public void run() {
        try {
            // Initialize the output and input streams for communication
            out = new ObjectOutputStream(myConnection.getOutputStream());
            out.flush();
            in = new ObjectInputStream(myConnection.getInputStream());

            boolean keepRunning = true; // Loop control flag

            while (keepRunning) {
                sendMessage("Please enter 1 to register, 2 to login, or 0 to exit");
                message = (String) in.readObject();

                if (message.equalsIgnoreCase("0")) {
                    sendMessage("Goodbye!");
                    keepRunning = false;
                    break;
                }

                if (message.equalsIgnoreCase("1")) {
                    boolean registering = true;

                    while (registering) {
                        sendMessage("Please enter your name: ");
                        name = (String) in.readObject();

                        sendMessage("Please enter your employee ID: ");
                        employeeID = (String) in.readObject();

                        sendMessage("Please enter your email: ");
                        email = (String) in.readObject();

                        sendMessage("Please enter your password: ");
                        password = (String) in.readObject();

                        sendMessage("Please enter department name: ");
                        deptName = (String) in.readObject();

                        sendMessage("Please enter your role: ");
                        role = (String) in.readObject();

                        shared.addAccount(name, employeeID, email, password, deptName, role);

                        sendMessage("Registration succeeded!");
                        sendMessage("Enter 1 to repeat (go back to main menu), or 0 to exit registration.");
                        message = (String) in.readObject();

                        if (!message.equalsIgnoreCase("1")) {
                            registering = false;
                        }
                    }
                }

                if (message.equalsIgnoreCase("2")) {
                    sendMessage("Please enter your email: ");
                    emailAttempt = (String) in.readObject();

                    sendMessage("Please enter your password: ");
                    passwordAttempt = (String) in.readObject();

                    if (shared.searchAccount(emailAttempt, passwordAttempt)) {
                        sendMessage("Login successful!");
                        // Add logged-in menu logic here
                    } else {
                        sendMessage("Login failed. Please check your email and password.");
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage("An error occurred. Disconnecting...");
        } finally {
            try {
                if (in != null) in.close();
                if (out != null) out.close();
                if (myConnection != null) myConnection.close();
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
        }
    }


    // Helper method to send messages to the client
    void sendMessage(String msg) {
        try {
            out.writeObject(msg);    // Write the message object to output stream
            out.flush();             // Flush the stream to ensure the message is sent
            System.out.println("server> " + msg);   // Print the message on the server console
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }
    
    private void createReport() throws IOException, ClassNotFoundException {
    	 
    	String message;
    	    int reportChoice;

    	    // Prompt for a valid choice
    	    while (true) {
    	        sendMessage("1 for accident report or 2 for health and safety risk report");
    	        message = (String) in.readObject();

    	        if (message.equals("1") || message.equals("2")) {
    	            reportChoice = Integer.parseInt(message);
    	            break;
    	        } else {
    	            sendMessage("Invalid input. Please enter 1 or 2.");
    	        }
    	    }
        
        reportID++;
        
        if (reportChoice == 1) {
            reportType = "Accident Report";
        } else {
            reportType = "Health and Safety Report";
        }
        
        //Creates report
        reportDB.addReport(reportID, date, employeeID, reportType, "Open", assignedID);
        
        sendMessage("Report ID: " + reportID);
        String dateString = date.toString(); // Convert LocalDate to string
        sendMessage("Date: " + dateString);
        sendMessage("Employee ID of creation: " + employeeID);
        sendMessage("Status: Open");
        sendMessage("Assigned Employee ID: ");

        


        // Confirm report creation
        sendMessage("Report created successfully!\n" +
                "Report Details:\n" +
                "Type: " + reportType + "\n" +
                "Report ID: " + reportID + "\n" +
                "Date: " + dateString + "\n" +
                "Created By: " + employeeID + "\n" +
                "Assigned To: " + assignedID + "\n" +
                "Status: Open");
        
        sendMessage("Returning to the main menu...");
    }

}
